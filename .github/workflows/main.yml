name: Deploy Global Web VMs for DSA

on:
  workflow_dispatch:

jobs:
  deploy-vms:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [centralindia, eastus, westeurope]
     
    env:
      ADMIN_PASSWORD: ${{ secrets.VM_PASSWORD }}
    steps:
      - name: Checkout GitHub repository
        uses: actions/checkout@v2  # Checkout the repository to access files like index.html and dsaapp.py

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create resource group
        run: |
          az group create --name dsa-rg-${{ matrix.region }} --location ${{ matrix.region }}

      - name: Create VM with Flask App (Password-based Auth)
        run: |
          az vm create \
            --resource-group dsa-rg-${{ matrix.region }} \
            --name webvm-${{ matrix.region }} \
            --image Ubuntu2204 \
            --admin-username azureuser \
            --admin-password $ADMIN_PASSWORD

      - name: Open port 80
        run: |
          az vm open-port --port 80 --resource-group dsa-rg-${{ matrix.region }} --name webvm-${{ matrix.region }}

      - name: Retrieve Public IP of VM
        id: get_public_ip
        run: |
          PUBLIC_IP=$(az vm list-ip-addresses --resource-group dsa-rg-${{ matrix.region }} --name webvm-${{ matrix.region }} --query "[0].virtualMachine.network.publicIpAddresses[0].ipAddress" -o tsv)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Install sshpass
        run: |
          sudo apt-get install -y sshpass

      - name: Install Flask and related components on VM
        run: |
          sshpass -p $ADMIN_PASSWORD ssh -o StrictHostKeyChecking=no azureuser@${{ env.PUBLIC_IP }} << 'EOF'
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            sudo pip3 install flask
            sudo mkdir -p /var/www/flaskapp/templates
            sudo mkdir -p /var/www/flaskapp
          EOF

      - name: Copy files and deploy Flask app
  run: |
    sshpass -p $ADMIN_PASSWORD scp -o StrictHostKeyChecking=no $GITHUB_WORKSPACE/index.html azureuser@$PUBLIC_IP:/home/azureuser/index.html
    sshpass -p $ADMIN_PASSWORD scp -o StrictHostKeyChecking=no $GITHUB_WORKSPACE/dsaapp.py azureuser@$PUBLIC_IP:/home/azureuser/dsaapp.py

    sshpass -p $ADMIN_PASSWORD ssh -o StrictHostKeyChecking=no azureuser@$PUBLIC_IP <<EOF
      sudo mkdir -p /var/www/flaskapp/templates
      sudo mv /home/azureuser/index.html /var/www/flaskapp/templates/index.html
      sudo mv /home/azureuser/dsaapp.py /var/www/flaskapp/app.py
    EOF

      - name: Create flaskapp service and enable it
        run: |
          sshpass -p $ADMIN_PASSWORD ssh -o StrictHostKeyChecking=no azureuser@${{ env.PUBLIC_IP }} << 'EOF'
            sudo echo "[Unit]
            Description=Flask App
            After=network.target

            [Service]
            ExecStart=/usr/bin/python3 /var/www/flaskapp/app.py
            WorkingDirectory=/var/www/flaskapp
            Restart=always

            [Install]
            WantedBy=multi-user.target" > /etc/systemd/system/flaskapp.service

            sudo systemctl daemon-reexec
            sudo systemctl daemon-reload
            sudo systemctl enable flaskapp
            sudo systemctl start flaskapp
          EOF

      - name: Restart Flask app service
        run: |
          sshpass -p $ADMIN_PASSWORD ssh -o StrictHostKeyChecking=no azureuser@${{ env.PUBLIC_IP }} "sudo systemctl restart flaskapp"
